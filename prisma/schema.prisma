generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tb_meetingroom {
  roomId      Int      @id @default(autoincrement())
  hostId      Int
  isPrivate   Boolean  @db.Bit(1)
  description String?  @db.VarChar(50)
  isFinished  Boolean? @default(dbgenerated("b'0'")) @db.Bit(1)
  tb_user     tb_user  @relation(fields: [hostId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "hostId_userId")

  @@index([hostId], map: "hostId_userId_idx")
}

model tb_message {
  messageId Int      @id @default(autoincrement())
  roomId    Int
  senderId  Int
  message   String   @db.Text
  createdAt DateTime @default(now()) @db.DateTime(0)
}

model tb_role {
  roldId       Int            @id @default(autoincrement())
  authority    String         @db.VarChar(50)
  rolename     String         @db.VarChar(50)
  tb_user_role tb_user_role[]
}

model tb_room {
  roomId                              Int       @id @default(autoincrement())
  senderId                            Int
  receiverId                          Int
  last_time                           DateTime? @db.DateTime(0)
  roomname                            String    @unique(map: "roomname_UNIQUE") @db.VarChar(100)
  last_message                        String?   @db.VarChar(50)
  tb_user_tb_room_receiverIdTotb_user tb_user   @relation("tb_room_receiverIdTotb_user", fields: [receiverId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "receiverId")
  tb_user_tb_room_senderIdTotb_user   tb_user   @relation("tb_room_senderIdTotb_user", fields: [senderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "senderId")

  @@index([receiverId], map: "receiverId")
  @@index([senderId], map: "senderId")
}

model tb_user {
  userId                              Int                @id @default(autoincrement())
  email                               String             @unique(map: "uniqueEmail") @db.VarChar(100)
  password                            String             @db.VarChar(100)
  username                            String             @db.VarChar(45)
  profilePic                          String             @default("profile_default_img.jpeg")
  tb_history                          tb_history[]
  tb_meetingroom                      tb_meetingroom[]
  tb_participant                      tb_participant[]
  tb_room_tb_room_receiverIdTotb_user tb_room[]          @relation("tb_room_receiverIdTotb_user")
  tb_room_tb_room_senderIdTotb_user   tb_room[]          @relation("tb_room_senderIdTotb_user")
  tb_transcription                    tb_transcription[]
  tb_user_role                        tb_user_role[]
}

model tb_user_role {
  user_role_id Int     @id @default(autoincrement())
  userId       Int
  roldId       Int
  tb_user      tb_user @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "FK_tb_user_TO_tb_user_role_1")
  tb_role      tb_role @relation(fields: [roldId], references: [roldId], onDelete: NoAction, onUpdate: NoAction, map: "roldId")

  @@index([roldId], map: "roldId_idx")
  @@index([userId], map: "userId_idx")
}

model tb_history {
  historyId        Int                @id @default(autoincrement())
  start_time       DateTime           @default(now()) @db.DateTime(0)
  last_message     String?            @db.VarChar(50)
  host_userId      Int
  roomId           String             @db.VarChar(15)
  tb_user          tb_user            @relation(fields: [host_userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "host_user_id")
  tb_participant   tb_participant[]
  tb_transcription tb_transcription[]

  @@index([host_userId], map: "host_user_id_idx")
}

model tb_participant {
  participant_id     Int        @id @default(autoincrement())
  history_id         Int
  participant_userId Int
  tb_history         tb_history @relation(fields: [history_id], references: [historyId], onDelete: NoAction, onUpdate: NoAction, map: "participant_historyId")
  tb_user            tb_user    @relation(fields: [participant_userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "participant_userId")

  @@index([history_id], map: "participant_historyId_idx")
  @@index([participant_userId], map: "participant_userId_idx")
}

model tb_transcription {
  transcriptId Int        @id @default(autoincrement())
  historyId    Int
  senderId     Int
  message      String     @db.Text
  tb_history   tb_history @relation(fields: [historyId], references: [historyId], onDelete: NoAction, onUpdate: NoAction, map: "transcription_historyId")
  tb_user      tb_user    @relation(fields: [senderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "transcription_senderId")

  @@index([historyId], map: "historyId_idx")
  @@index([senderId], map: "transcription_senderId_idx")
}
